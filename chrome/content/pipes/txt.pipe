// 
// text paragraphs output. 'collect' text nodes' content until paragraph
// ends (checked by wsNode()) and output the result as many times as
// nodes were collected.
//

var extract = function(doc)
{
    traverse(doc, function(node, kw) 
        {
            node.parentNode.className = filterkw(node.parentNode.className) + kw;
        }, "krdwrd-tag-1"
    );

    var res = "";
    var txt = [];

    function txTraverse(body)
    {
        var txind = 0;
        var line = "";

        function prtLines()
        {
            for (i=0; i < txind; i++) txt[txt.length] = 
                // append the lines - as often as nodes have been passed by - and make
                // sure that there are no WS at the beginning, the end or more than 
                // one successive one within a line.
                line.replace( /^\s+/, "").replace( /\s+$/, "").replace( /\s+/g, " ");
            line = "";
            txind = 0;
        };

        function rec(node)
        {
            if (node.nodeName == "#text")
            {
                // is this a text node that is recognized by /the other/ pipelines?
                if (node.data.replace( /^\s+/g, "").replace( /\s+$/g, "")
                    .replace( /\n/g, " ").replace(/  +/g, " "))
                {
                    txind++;
                }

                // keep the formatting close to the rendered output, e.g.
                // do not discard ' ' between two <A> tags; or else the text of the links sticks together.
                var formttx = node.data.replace( /\n/g, " ")
                    .replace( /[\t ]+/g, " ")
                    .replace( /^\s+$/g, " ")
                    .replace( /^[\t ]+/g, " ")
                    .replace( /[\t ]+$/g, " ");

                if (formttx) line += formttx;
            } 
            
            if (txind > 0 && wsNode(node))
            {
                verbose("<" + node.nodeName + ">, " + txind);
                prtLines();
            }

            for (child in node.childNodes)
            {
                cnode = node.childNodes[child];
                if (recursehere(cnode))
                    rec(cnode);
            }

            if (wsNode(node))
            {
                verbose("</" + node.nodeName + ">, " + txind);
                prtLines();
            }
        };
        rec(body);
        if (txind > 0) prtLines();
    }
    txTraverse(doc);

    for (t in txt) res += txt[t] + "\n";
    return res;
}


// vim: filetype=javascript
